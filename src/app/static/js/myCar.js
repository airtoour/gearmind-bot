document.addEventListener("DOMContentLoaded", async () => {
    const userLevel = document.getElementById("level");
    const userExperience = document.getElementById("experience");
    const myCar = document.getElementById("my-car");
    const washStatus = document.getElementById("wash-status");

    const tg = window.Telegram.WebApp;
    const tgUserId = tg.initDataUnsafe?.user?.id;

    try {
        const res = await fetch(`/game/garage/wash/status?telegram_id=${tgUserId}`);
        const data = await res.json();

        if (data.status === "fail") {
            alert(data.message);
            window.location.href = "/errors/400";
            return;
        } else {
            washStatus.innerText = data.message;
        }

        if (data.next_wash_at) {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç Date
            const nextWashTime = new Date(data.next_wash_at);
            // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á—ë—Ç —Å –º–æ–º–µ–Ω—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–π–∫–∏
            startCountdownTimer(nextWashTime);
        }

        myCar.addEventListener("click", async () => {
            try {
                const response = await fetch("/game/garage/wash", {
                    method: "PATCH",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ tg_user_id: tgUserId }),
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    alert(errorData.data.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—ã—Ç—å–µ");
                    return;
                }

                const result = await response.json();
                alert(result.data.message);

                // –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –º–æ–π–∫–∏
                if (result.washed) {
                    const nextWash = new Date(result.data.last_wash_car_time);
                    nextWash.setHours(nextWash.getHours() + 6); // –¥–æ–±–∞–≤–ª—è–µ–º 6 —á–∞—Å–æ–≤
                    startCountdownTimer(nextWash); // –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
                }
            } catch (err) {
                console.error(err);
                alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º—ã—Ç—å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è");
            }
        });
    } catch (err) {
        console.error(err);
        alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞");
        window.location.href = "/errors/400";
    }

    async function startCountdownTimer(endTime) {
        const getLevel = await fetch(`/game/level/${tgUserId}`);

        if (!getLevel.ok) {
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è");
            return;
        }

        const levelData = await getLevel.json();

        userLevel.innerHTML = `<strong>–£—Ä–æ–≤–µ–Ω—å:</strong> ${levelData.level}`;
        userExperience.innerHTML = `<strong>–û–ø—ã—Ç:</strong> ${levelData.experience}`;

        function updateTimer() {
            const now = new Date();
            const diff = endTime - now;

            if (diff <= 0) {
                washStatus.innerText = "–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å–Ω–æ–≤–∞ –≥—Ä—è–∑–Ω—ã–π! –ü–æ—Ä–∞ –µ–≥–æ –ø–æ–º—ã—Ç—å üßΩ";
                clearInterval(timer);
                return;
            }

            const hours = Math.floor(diff / (1000 * 60 * 60));
            const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((diff % (1000 * 60)) / 1000);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –æ—Å—Ç–∞–≤—à–∏–º—Å—è –≤—Ä–µ–º–µ–Ω–µ–º
            washStatus.innerText = `üöø –°–ª–µ–¥—É—é—â–∞—è –º–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ ${hours}—á ${minutes}–º ${seconds}—Å`;
        }

        updateTimer(); // –û–±–Ω–æ–≤–∏–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        const timer = setInterval(updateTimer, 1000); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    }
});
