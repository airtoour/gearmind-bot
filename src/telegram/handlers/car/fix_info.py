from typing import Any, List

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from sqlalchemy.ext.asyncio import AsyncSession
from db.models import CarsRepository

from telegram.keyboards.inline.inline import car_info
from telegram.states.update_car_info import UpdateCarInfo

from logger import logger


router = Router(name="Fix Info of User`s Car")


@router.message(UpdateCarInfo.confirm_info)
async def confirm_car(message: Message, state: FSMContext, user: Any, session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å ID —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        messages_ids: List[int] = await state.get_value("messages_ids")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç "–î–∞" –∏–ª–∏ "–ù–µ—Ç"
        messages_ids.append(message.message_id)

        for message_id in messages_ids:
            await message.bot.delete_message(message.chat.id, message_id)

        if message.text == "‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ":
            await message.answer(
                "–Ø —Ä–∞–¥! üòä\n"
                "–ï—Å–ª–∏ —É –í–∞—Å –±–æ–ª—å—à–µ <b>–Ω–µ—Ç</b> –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –í–∞—à–∏–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º, "
                "—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–º–∞–Ω–¥—É <b>–≤ –ú–µ–Ω—é —Å–ª–µ–≤–∞ —Å–Ω–∏–∑—É</b>"
            )

        elif message.text == "‚ùå –ù–µ –≤–µ—Ä–Ω–æ":
            car = await CarsRepository.find_one_or_none(session, user_id=user.id)

            await message.answer(
                text="–û—É, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —Ç–∞–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –í–∞—à–µ–π –º–∞—à–∏–Ω—ã?\n"
                     "–í—ã–±–µ—Ä–∏—Ç–µ <b>–Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —á–∞—Å—Ç—å</b> –í–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∏–∂–µ ",
                reply_markup=await car_info(car)
            )

        else:
            if message.text.startswith("/"):
                await message.answer("–û–∫–µ–π, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è...")
    except Exception as e:
        logger.error(f"Confirm Car: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."""
        )
    finally:
        await state.clear()


@router.callback_query(F.data.startswith("info:"))
async def problem_parts(callback: CallbackQuery, state: FSMContext):
    try:
        field = callback.data.split(":")[1]
        value = callback.data.split(":")[-1]

        await callback.message.answer(
            f"–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–∫–∞–∑–∞–ª–∞—Å—å –Ω–µ–≤–µ—Ä–Ω–æ–π üòî\n\n"
            f"–î–∞–≤–∞–π—Ç–µ <b>–∏–∑–º–µ–Ω–∏–º</b> —ç—Ç—É —á–∞—Å—Ç—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∏–∂–µ <b>–Ω–æ–≤–æ–µ</b> –∑–Ω–∞—á–µ–Ω–∏–µ üëá\n\n"
            f"<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</b>: {value}"
        )
        await state.set_state(UpdateCarInfo.correct_part)
        await state.update_data(problem_field=field)
    except Exception as e:
        logger.error(f"Problem Parts: {e}")
        await callback.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )


@router.message(UpdateCarInfo.correct_part)
async def update_part(message: Message, state: FSMContext, user: Any, session: AsyncSession):
    try:
        problem_field = await state.get_value("problem_field")
        new_value = message.text

        data = {problem_field: new_value}

        await CarsRepository.update(
            session,
            CarsRepository.model.user_id == user.id,
            **data
        )

        await message.edit_text(
            "–í—Å—ë! –ü–æ–ø—Ä–∞–≤–∏–ª–∏. –ù–∞–¥–µ—é—Å—å, —Ç–∞–∫–æ–≥–æ –±–æ–ª—å—à–µ –Ω–µ —Å–ª—É—á–∏—Ç—Å—è, —É—Å–ø–µ—Ö–æ–≤!"
        )
    except Exception as e:
        logger.error(f"Update Part: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )
    finally:
        await state.clear()
