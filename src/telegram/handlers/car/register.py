import asyncio
from typing import Union, Any, List

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from sqlalchemy.ext.asyncio import AsyncSession
from db.models import CarsRepository

from telegram.handlers.car.fix_info import router as fix_info_cars
from telegram.states.signup_car import SignupUserCarStates
from telegram.states.update_car_info import UpdateCarInfo
from telegram.keyboards.reply.reply import car_info_confirm
from telegram.keyboards.inline.inline import (
    car_list,
    lets_solution,
    retry_register_car
)

from logger import logger


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router = Router(name="Work with User`s Car")

# –î–æ–±–∞–≤–ª—è–µ–º –∫ —ç—Ç–æ–º—É —Ä–æ—É—Ç–µ—Ä—É —Ä–æ—É—Ç–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ê–≤—Ç–æ–º–æ–±–∏–ª—è
router.include_router(fix_info_cars)


@router.message(Command("car"))
@router.callback_query(F.data.in_(["car", "retry_register_car"]))
async def car(event: Union[Message, CallbackQuery], state: FSMContext, user: Any, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /car –∏ –∫–Ω–æ–ø–∫–∏ car, –∞ —Ç–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—à–∏–Ω—ã –∫ –Ω–∞—á–∞–ª—É"""
    message = None

    try:
        if isinstance(event, Message):
            message = event
        if isinstance(event, CallbackQuery):
            message = event.message

        # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        messages_ids = []

        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await state.clear()

        # –ò—â–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users_car = await CarsRepository.find_one_or_none(session, user_id=user.id)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.delete()

        if users_car:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            exists_car_message = await message.answer(
                text="–í–∞—à–∞ –º–∞—à–∏–Ω–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É –Ω–∞—Å. –≠—Ç–æ –æ–Ω–∞, –≤–µ—Ä–Ω–æ?\n\n"
                     f"<b>üîª –ë—Ä—ç–Ω–¥:</b> {users_car.brand_name}\n"
                     f"<b>üîª –ú–∞—Ä–∫–∞:</b> {users_car.model_name}\n"
                     f"<b>üîª –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> {users_car.gen_name}\n"
                     f"<b>üîª –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:</b> {users_car.year} –≥–æ–¥–∞\n"
                     f"<b>üîª –ü—Ä–æ–±–µ–≥:</b> {users_car.mileage}",
                reply_markup=car_info_confirm
            )
            await state.set_state(UpdateCarInfo.confirm_info)
            messages_ids.append(exists_car_message.message_id)
            await state.update_data(messages_ids=messages_ids)

            return

        # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        to_register_car_message = await message.answer(
            text="‚ö†Ô∏è <b>–í–∏–¥–∏–º, —á—Ç–æ –í—ã –µ—â—ë –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ —Å–≤–æ–π "
                 "–∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ!</b>\n\n"
                 "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –í–∞—à—É –º–∞—à–∏–Ω—É, "
                 "–Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—ë <b>–º–∞—Ä–∫—É</b>. –ù–∞–ø—Ä–∏–º–µ—Ä, <b>Lada</b>\n\n"
                 "–ß—Ç–æ–±—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π, —Å–≤–µ—Ä—å—Ç–µ –µ–µ —Å–æ —Å–ø–∏—Å–∫–æ–º "
                 "–º–∞—à–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ\n\n"
                 "<blockquote>"
                 "<i>–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—à—É –í–∞—Å –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å <b>–ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º</b>\n"
                 "–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –Ω–∞–º <b>–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –í–∞—à "
                 "–∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã</i>"
                 "</blockquote>",
            reply_markup=car_list
        )

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
        messages_ids.append(to_register_car_message.message_id)

        # –°—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await state.set_state(SignupUserCarStates.brand)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(messages_ids=messages_ids)
    except Exception as e:
        logger.error(f"Car: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )

@router.message(SignupUserCarStates.brand)
async def get_model(message: Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        messages_ids: List[int] = await state.get_value("messages_ids")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        get_model_message = await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
            "<b>–º–æ–¥–µ–ª—å</b> —Å–≤–æ–µ–π –º–∞—à–∏–Ω—ã –Ω–∏–∂–µ üëá"
        )

        messages_ids.append(message.message_id)
        messages_ids.append(get_model_message.message_id)

        await state.set_state(SignupUserCarStates.model)
        await state.update_data(car_brand=message.text, messages_ids=messages_ids)
    except Exception as e:
        logger.error(f"Car Brand: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )


@router.message(SignupUserCarStates.model)
async def get_year(message: Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∏—Å–∫–∞
        messages_ids: List[int] = await state.get_value("messages_ids")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        get_year_message = await message.answer(
            "–•–æ—Ä–æ—à–∞—è –º–æ–¥–µ–ª—å. –î–∞–ª–µ–µ –≥–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –º–∞—à–∏–Ω—ã. "
            "–ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, <b>2012</b>"
        )

        messages_ids.append(message.message_id)
        messages_ids.append(get_year_message.message_id)

        await state.set_state(SignupUserCarStates.year)
        await state.update_data(car_model=message.text, messages_ids=messages_ids)
    except Exception as e:
        logger.error(f"Car Model: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )

@router.message(SignupUserCarStates.year)
async def get_gen(message: Message, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    try:
        messages_ids: List[int] = await state.get_value("messages_ids")

        # –ï—Å–ª–∏ –±—ã–ª –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞
        if (len(message.text) > 4 or len(message.text) < 4) or (
            message.text[0] == "2"
            and message.text[1].isdigit()
            and int(message.text[1]) > 0
        ):
            bad_year_message = await message.answer(
                text="‚ùå –ë—ã–ª –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –±—ã–ª –≤–≤–µ–¥—ë–Ω –≤ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, "
                     "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n\n"
                     "<blockquote><b><i>"
                     "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏–¥—ë—Ç—Å—è –Ω–∞—á–∞—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.\n"
                     "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º, –ø—Ä–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞"
                     "</i></b></blockquote>",
                reply_markup=retry_register_car
            )

            messages_ids.append(message.message_id)
            messages_ids.append(bad_year_message.message_id)

            await state.set_state(SignupUserCarStates.gen)
            await state.update_data(messages_ids=messages_ids)

            return

        get_gen_message = await message.answer(
            text="–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ <b>–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é</b>, "
                 "<b>–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é</b> –∏ —Ç.–ø. –í–∞—à–µ–π –º–∞—à–∏–Ω—ã –Ω–∏–∂–µ üëá\n\n"
                 "<blockquote>"
                 "–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, "
                 "<b>–Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–≤–µ—Ä–∏—Ç—å—Å—è</b> —Å–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä—É—é –º—ã "
                 "–æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –í–∞–º —Ä–∞–Ω–µ–µ (–∫–Ω–æ–ø–∫–∞), –∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –í–∞—à–µ–π –º–∞—à–∏–Ω–µ"
                 "</blockquote>",
            reply_markup=car_list
        )

        messages_ids.append(message.message_id)
        messages_ids.append(get_gen_message.message_id)

        await state.set_state(SignupUserCarStates.gen)
        await state.update_data(car_year=message.text, messages_ids=messages_ids)
    except Exception as e:
        logger.error(f"Car Year: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )

@router.message(SignupUserCarStates.gen)
async def get_mileage(message: Message, state: FSMContext):
    try:
        messages_ids: List[int] = await state.get_value("messages_ids")

        get_mileage_message = await message.answer(
            "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–±–µ–≥ –í–∞—à–µ–π –º–∞—à–∏–Ω—ã –Ω–∏–∂–µ üëá\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –∏–º–µ–Ω–Ω–æ —Å—É–º–º—É —Ç—ã—Å—è—á –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤.\n\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É –í–∞—Å 150.000 –∫–º, —Ç–æ–≥–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ, —Ç–æ–ª—å–∫–æ 150</i>"
        )

        messages_ids.append(message.message_id)
        messages_ids.append(get_mileage_message.message_id)

        await state.set_state(SignupUserCarStates.mileage)
        await state.update_data(car_gen=message.text, messages_ids=messages_ids)
    except Exception as e:
        logger.error(f"Mileage: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )

@router.message(SignupUserCarStates.mileage)
async def register(message: Message, state: FSMContext, user: Any, session: AsyncSession):
    try:
        messages_ids = await state.get_value("messages_ids")

        car_brand = await state.get_value("car_brand")
        car_model = await state.get_value("car_model")
        car_year = int(await state.get_value("car_year"))
        car_gen = await state.get_value("car_gen")
        car_mileage = int(message.text)

        # –ó–∞–≤–æ–¥–∏–º —Ç–∞—Å–∫—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        delete_messages_task = [
            message.bot.delete_message(
                chat_id=message.chat.id,
                message_id=message_id
            ) for message_id in messages_ids
        ]

        added_car = CarsRepository.add(
            session=session,
            user_id=user.id,
            brand_name=car_brand,
            model_name=car_model,
            gen_name=car_gen,
            year=car_year,
            mileage=car_mileage,
            full=f"{car_brand} {car_model} "
                 f"{car_gen} {car_year} –≥–æ–¥–∞ —Å "
                 f"–ø—Ä–æ–±–µ–≥–æ–º {car_mileage} —Ç—ã—Å. –∫–º"
        )

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–∞—Å–∫–∏
            results = await asyncio.gather(
                *delete_messages_task,
                added_car,
                return_exceptions=True
            )
        except Exception as e:
            logger.error(
                f"–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–∞—Å–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ "
                f"–∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
            )
            return

        messages_ids.clear()

        new_car = results[-1]

        if not new_car:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–¥–Ω–µ–µ"
            )
            return

        await message.answer(
            text=f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –º–∞—à–∏–Ω–∞:\n"
                 f"\n"
                 f"<blockquote>"
                 f"<b>üîª –ë—Ä—ç–Ω–¥:</b> {car_brand}\n"
                 f"<b>üîª –ú–∞—Ä–∫–∞:</b> {car_model}\n"
                 f"<b>üîª –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:</b> {car_year} –≥–æ–¥–∞\n"
                 f"<b>üîª –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> {car_gen}\n"
                 f"<b>üîª –ü—Ä–æ–±–µ–≥:</b> {car_mileage}"
                 f"</blockquote>\n"
                 "\n"
                 "–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, "
                 "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π üôå",
            reply_markup=lets_solution
        )
    except Exception as e:
        logger.error(f"Register: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )
    finally:
        await state.clear()
